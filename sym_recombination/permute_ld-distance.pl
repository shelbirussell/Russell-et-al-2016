use strict ;
use warnings ;
use Math::Random ;
use Statistics::RankCorrelation ;

# Usage: perl permute_ld-distance.pl -0.281807931505321 < Sv_multisample-LD-AFfilt_bin.txt
# Note: this permutation test does 5000 randomizations, so p = 0 means that p < 2e-4

my$emp_rho = $ARGV[0] ;
my$below = 0 ;
my$above = 0 ;

my@dist = () ;
my@r2 = () ;
my@rhos = () ;
my$pval_left ;
my$pval_right ;

# get measured distances and r^2 values
while (<STDIN>) {
    my@split = split (/\t/, $_) ;
    push @dist, $split[0] ;
    push @r2, $split[1] ;
}

# randomly permutate distance and r^2 arrays, and calculate correlation coefficients for each
foreach (0...4999) {
    my@dist_permute = random_permutation(@dist) ;
    my@r2_permute = random_permutation(@r2) ;

    my$cor = Statistics::RankCorrelation->new( \@dist_permute, \@r2_permute ) ;
    my$rho = $cor->spearman ;
    push @rhos, $rho ;
#    print $rho, "\n" ;
}

# count number of rhos less than or equal to empirically measured correlation generated by chance
foreach my$rho (sort {$a<=>$b} @rhos) {
    if ($rho <= $emp_rho) {
        $below ++ ;
    }

    if($rho >= $emp_rho) {
        $above ++ ;
    }
}

$pval_left = ($below+1)/(5000+1) ;
$pval_right = ($above+1)/(5000+1) ;

print "probability correlation coefficient could be less than or equal to ", $emp_rho, " by chance: ", $pval_left, "\n" ;
print "probability correlation coefficient could be greater than or equal to ", $emp_rho, " by chance: ", $pval_right, "\n" ;